* WSL2 - Ubuntu 20.04 setup

** 事前準備
- [ ] (WSL2内)プロキシの設定
  - /etc/apt/apt.conf
    #+begin_src
      Acquire::http::proxy "http://id:pass@proxysrv:port/";
      Acquire::https::proxy "https://id:pass@proxysrv:port/";
    #+end_src
  - /etc/wgetrc
    - proxyを検索して記載
  - 環境変数
    - export HTTP_PROXY
    - export HTTPS_PROXY
    - export NO_PROXY
- [ ] systemdの有効化
  #+begin_src sh
    sudo bash -c "cat <<EOF > /etc/wsl.conf
[boot]
systemd=true
EOF"
  #+end_src
  #+begin_src powershell
    wsl.exe --shutdown
  #+end_src

** update & upgrade & install
#+begin_src sh
  sudo apt update &&
      sudo apt -y full-upgrade &&
      sudo apt -y install \
           language-pack-ja  manpages-ja manpages-ja-dev \
           fonts-ricty-diminished \
           x11-xkb-utils \
           peco jq gron git curl unzip zip \
           bash-completion \
           silversearcher-ag \
           build-essential \
           libbz2-dev \
           libdb-dev \
           libffi-dev \
           libffi7 \
           libgdbm-dev \
           libgmp-dev \
           libgmp10 \
           liblzma-dev \
           libncurses-dev \
           libncurses5 \
           libncursesw5-dev \
           libreadline-dev \
           libsqlite3-dev \
           libssl-dev \
           libtinfo5 \
           tk-dev \
           uuid-dev \
           zlib1g-dev
#+end_src
  
** dotfiles
#+begin_src sh
  git clone https://github.com/chupaaaaaaan/dotfiles.git .dotfiles &&
      bash ~/.dotfiles/deploy.bash &&
      rm -f ~/.profile &&
      ln -s ~/.bash_profile ~/.profile &&
      . ~/.bash_profile
#+end_src

** locale (Japan)
#+begin_src sh
  sudo update-locale LANG=ja_JP.utf8
#+end_src

** timezone (Asia/Tokyo)
#+begin_src sh
  sudo ln -f -s /usr/share/zoneinfo/Asia/Tokyo /etc/localtime
#+end_src

** Japanize
#+begin_src sh
  sudo wget -q https://www.ubuntulinux.jp/ubuntu-jp-ppa-keyring.gpg -P /etc/apt/trusted.gpg.d/ &&
      sudo wget -q https://www.ubuntulinux.jp/ubuntu-ja-archive-keyring.gpg -P /etc/apt/trusted.gpg.d/ &&
      sudo wget -q https://www.ubuntulinux.jp/sources.list.d/jammy.list -O /etc/apt/sources.list.d/ubuntu-ja.list &&
      sudo apt update &&
      sudo apt -y install ubuntu-defaults-ja
#+end_src

** Docker CE
see https://docs.docker.com/engine/install/ubuntu/

** Emacs 28
#+begin_src sh
  sudo add-apt-repository ppa:kelleyk/emacs &&
      sudo apt update &&
      sudo apt -y install emacs28 emacs28-el emacs-mozc cmake libtool-bin && #=> cmake and libtool-bin for vterm
      : > ~/.bashrc.d/emacs &&
      echo "alias emacs='setxkbmap -layout jp && XMODIFIERS=@im=none emacs >> /dev/null 2>&1 &'" > ~/.bashrc.d/emacs &&
      . ~/.bashrc.d/emacs
#+end_src

** Dropbox
#+begin_src sh
  curl -L https://www.dropbox.com/download?plat=lnx.x86_64 | tar xzvf - &&
      curl -L -o ~/bin/dropbox.py https://www.dropbox.com/download?dl=packages/dropbox.py &&
      chmod +x ~/bin/dropbox.py &&
      dropbox.py autostart y &&
      dropbox.py start &&
      dropbox.py status && #=> リンク実施
      : > ~/.bashrc.d/dropbox &&
      echo "dropbox.py status | grep -q \"Dropbox isn't running\!\" && dropbox.py start > /dev/null 2>&1" > ~/.bashrc.d/dropbox
#+end_src

#+begin_src sh
  ~/.dropbox-dist/dropbox.py status #=> 同期状況確認
#+end_src

#+begin_src sh
  ln -s ~/Dropbox/org ~/org
#+end_src

** ssh
#+begin_src sh
  mkdir ~/.ssh &&
      chmod 700 ~/.ssh &&
      cp ~/Dropbox/clients/dotssh/* ~/.ssh &&
      chmod 400 ~/.ssh/*.key
#+end_src

** Input method
#+begin_src sh
  sudo apt update &&
      sudo apt -y install fcitx-mozc &&
      dbus-uuidgen | sudo tee /var/lib/dbus/machine-id > /dev/null 2>&1 &&
      im-config -n fcitx &&
      : > ~/.bash_profile.d/fcitx-mozc &&
      cat << EOF > ~/.bash_profile.d/fcitx-mozc
  export GTK_IM_MODULE=fcitx
  export QT_IM_MODULE=fcitx
  export XMODIFIERS=@im=fcitx
  export DefaultIMModule=fcitx
  if [ \$SHLVL = 1 ] ; then
      fcitx-autostart > /dev/null 2>&1
      xset -r 49  > /dev/null 2>&1
  fi

  export NO_AT_BRIDGE=1
  EOF
#+end_src

#+begin_src sh
  fcitx-configtools
  #=> 「入力メソッド」の一番上を、「キーボード - 日本語」にする。
  #=> 「Ctrl + Shift + S」のホットキーを無効化する。
#+end_src

** google chrome
#+begin_src sh
  curl -L -o /tmp/google-chrome.deb https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb &&
      sudo dpkg -i /tmp/google-chrome.deb
#+end_src

** Haskell
#+begin_src sh
  sudo apt update &&
      sudo apt -y install  &&
      curl --proto '=https' --tlsv1.2 -sSf https://get-ghcup.haskell.org | sh
#+end_src

#+begin_src sh
  : > ~/.bash_profile.d/ghcup &&
      echo '[ -f ~/.ghcup/env ] && . ~/.ghcup/env' >> ~/.bash_profile.d/ghcup &&
      . ~/.bash_profile.d/ghcup
#+end_src

#+begin_src sh
  stack config set system-ghc --global true &&
      : > ~/.bashrc.d/stack &&
      echo 'eval "$(stack --bash-completion-script stack)"' >> ~/.bashrc.d/stack
#+end_src

** Node
#+begin_src sh
  wget -q -O- https://raw.githubusercontent.com/creationix/nvm/v0.39.1/install.sh | bash &&
      mkdir -p "$NVM_DIR" &&
      : > ~/.bashrc.d/node &&
      echo 'export NVM_DIR=$HOME/.nvm'                                       >> ~/.bashrc.d/node &&
      echo '[ -s "$NVM_DIR/nvm.sh" ] && . $NVM_DIR/nvm.sh'                   >> ~/.bashrc.d/node &&
      echo '[ -s "$NVM_DIR/bash_completion" ] && . $NVM_DIR/bash_completion' >> ~/.bashrc.d/node &&
      echo '[ "none" = $(nvm current) ] && nvm install node'                 >> ~/.bashrc.d/node &&
      . ~/.bashrc.d/node &&
      nvm install node --reinstall-packages-from=current &&
      nvm alias default node
#+end_src

** Elm
#+begin_src sh
  npm install -g http-server elm elm-format elm-oracle elm-test @elm-tooling/elm-language-server
#+end_src

** Intellij IDEA
#+begin_src sh
  # curl -L https://download.jetbrains.com/idea/ideaIU-2022.1.1.tar.gz | sudo tar xzvf - -C /opt &&
  #     ln -s /opt/idea-IU-221.5591.52/bin/idea.sh /opt/idea/bin/idea.sh &&
  #     : > ~/.bashrc.d/idea &&
  #     echo "alias idea='/opt/idea/bin/idea.sh >> /dev/null 2>&1 &'" > ~/.bashrc.d/idea
  sudo snap install intellij-idea-ultimate --classic &&
      : > ~/.bashrc.d/idea &&
      echo "alias idea='setxkbmap -layout jp && intellij-idea-ultimate >> /dev/null 2>&1 &'" > ~/.bashrc.d/idea
#+end_src

** virtualbox/vagrant (only configuration for WSL2)
#+begin_src sh
  wget -q -O- https://apt.releases.hashicorp.com/gpg | sudo apt-key add - &&
      sudo add-apt-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main" &&
      sudo apt update &&
      sudo apt -y install vagrant=$(vagrant.exe --version | cut -d' ' -f2 | tr -d '\r') &&
      : > ~/.bash_profile.d/vagrant &&
      echo 'export VAGRANT_WSL_ENABLE_WINDOWS_ACCESS="1"'               >> ~/.bash_profile.d/vagrant &&
      echo 'export PATH="$PATH:/mnt/c/Program Files/Oracle/VirtualBox"' >> ~/.bash_profile.d/vagrant &&
      . ~/.bash_profile.d/vagrant &&
      vagrant plugin install virtualbox_WSL2 &&
      vagrant plugin install vagrant-hosts &&
      vagrant plugin install vagrant-disksize
#+end_src

** go
#+begin_src sh
  : > ~/.bash_profile.d/go &&
      echo 'export GOPATH="$HOME/.local/go"'   >> ~/.bash_profile.d/go &&
      echo 'export PATH="$GOPATH/bin:$PATH"' >> ~/.bash_profile.d/go &&
      . ~/.bash_profile.d/go &&
      sudo rm -rf "$GOPATH" &&
      wget -O- https://go.dev/dl/go1.21.3.linux-amd64.tar.gz | tar -C "${GOPATH%/go}" -xzf -
#+end_src

** Python
#+begin_src sh
  : > ~/.bash_profile.d/python &&
      echo 'export PYPATH="$HOME/.local/python"' >> ~/.bash_profile.d/python &&
      echo 'export PATH="$PYPATH/bin:$PATH"'     >> ~/.bash_profile.d/python &&
      . ~/.bash_profile.d/python &&
      ( PYVERSION=3.12.0 &&
            wget -O- https://www.python.org/ftp/python/${PYVERSION}/Python-${PYVERSION}.tar.xz | tar -C /tmp -xJf - &&
            cd /tmp/Python-${PYVERSION} &&
            ./configure --prefix=$PYPATH &&
            make && make install )
#+end_src

** コマンドラインツール類
*** oj (competitive programming)
#+begin_src sh
  sudo apt update &&
      sudo apt -y install python3-pip &&
      pip3 install --user online-judge-tools
#+end_src
*** yq
#+begin_src sh
  wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O ~/.local/bin/yq &&
      chmod +x ~/.local/bin/yq
#+end_src
*** gh
see https://github.com/cli/cli/blob/trunk/docs/install_linux.md

*** ghq
#+begin_src sh
  go install github.com/x-motemen/ghq@latest
#+end_src
*** git-delta
#+begin_src sh
  curl -L -o /tmp/git-delta.deb https://github.com/dandavison/delta/releases/download/0.13.0/git-delta_0.13.0_amd64.deb &&
      sudo dpkg -i /tmp/git-delta.deb
#+end_src
*** AWSCLIv2
#+begin_src sh
  curl -L -o /tmp/awscliv2.zip https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip &&
      unzip -u -d /tmp /tmp/awscliv2.zip &&
      sudo /tmp/aws/install --update &&
      bash ~/Dropbox/creds/aws_cred_setup.bash
#+end_src

*** postgresql-13 client
#+begin_src sh
  wget -q -O- https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add - &&
      sudo add-apt-repository "deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" &&
      sudo apt update &&
      sudo apt -y install postgresql-client-13
#+end_src

*** SDKMAN
#+begin_src sh
  wget -q -O- "https://get.sdkman.io" | bash &&
      : > ~/.bashrc.d/sdkman &&
      echo 'export SDKMAN_DIR="~/.sdkman"'                                               >> ~/.bashrc.d/sdkman &&
      echo '[[ -s "~/.sdkman/bin/sdkman-init.sh" ]] && . "~/.sdkman/bin/sdkman-init.sh"' >> ~/.bashrc.d/sdkman &&
      . ~/.bashrc.d/sdkman &&
      sdk i java 11.0.15-tem &&
      sdk i maven 3.8.5
#+end_src
*** Terraform
see https://developer.hashicorp.com/terraform/install
