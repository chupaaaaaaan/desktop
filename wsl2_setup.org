* WSL2 - Ubuntu 20.04 setup

** 事前準備
- [ ] (再作成の場合)仮想マシンの登録解除
  #+begin_src
    wsl --list
    wsl --unregister Ubuntu
  #+end_src

- [ ] (WSL2内)プロキシの設定
  - /etc/apt/apt.conf
    #+begin_src
      Acquire::http::proxy "http://id:pass@proxysrv:port/";
      Acquire::https::proxy "https://id:pass@proxysrv:port/";
    #+end_src
  - /etc/wgetrc
    - proxyを検索して記載
  - 環境変数
    - ~export HTTP_PROXY~
    - ~export HTTPS_PROXY~
    - ~export NO_PROXY~
- [ ] (現在はいらないかも？)systemdの有効化
  #+begin_src sh
    sudo bash -c "cat <<EOF > /etc/wsl.conf
    [boot]
    systemd=true
    EOF"
  #+end_src
  #+begin_src powershell
    wsl.exe --shutdown
  #+end_src

** update & upgrade & install
#+begin_src sh
  sudo apt update &&
      sudo apt -y full-upgrade &&
      sudo apt -y install \
           language-pack-ja  manpages-ja manpages-ja-dev \
           fonts-ricty-diminished \
           firefox \
           x11-xkb-utils \
           peco jq gron git curl unzip zip graphviz \
           connect-proxy \
           bash-completion \
           silversearcher-ag \
           build-essential \
           libbz2-dev \
           libdb-dev \
           libffi-dev \
           libffi7 \
           libgdbm-dev \
           libgmp-dev \
           libgmp10 \
           liblzma-dev \
           libncurses-dev \
           libncurses5 \
           libncursesw5-dev \
           libreadline-dev \
           libsqlite3-dev \
           libssl-dev \
           libtinfo5 \
           tk-dev \
           uuid-dev \
           zlib1g-dev
#+end_src
  
** dotfiles
#+begin_src sh
  git clone https://github.com/chupaaaaaaan/dotfiles.git .dotfiles &&
      bash ${HOME}/.dotfiles/deploy.bash &&
      rm -f ${HOME}/.profile &&
      ln -s ${HOME}/.bash_profile ${HOME}/.profile &&
      . ${HOME}/.bash_profile
#+end_src

** locale (Japan)
#+begin_src sh
  sudo update-locale LANG=ja_JP.utf8
#+end_src

** timezone (Asia/Tokyo)
#+begin_src sh
  sudo ln -f -s /usr/share/zoneinfo/Asia/Tokyo /etc/localtime
#+end_src

** Japanize
#+begin_src sh
  sudo wget -q https://www.ubuntulinux.jp/ubuntu-jp-ppa-keyring.gpg -P /etc/apt/trusted.gpg.d/ &&
      sudo wget -q https://www.ubuntulinux.jp/ubuntu-ja-archive-keyring.gpg -P /etc/apt/trusted.gpg.d/ &&
      sudo wget -q https://www.ubuntulinux.jp/sources.list.d/jammy.list -O /etc/apt/sources.list.d/ubuntu-ja.list &&
      sudo apt update &&
      sudo apt -y install ubuntu-defaults-ja
#+end_src

** Docker CE
see below:
- [ ] https://docs.docker.com/engine/install/ubuntu/
- [ ] https://docs.docker.com/engine/install/linux-postinstall/
- [ ] https://qiita.com/dkoide/items/ca1f4549dc426eaf3735
  - for proxy setting

#+begin_src sh
  mkdir -p ${HOME}/.docker &&
      : > ${HOME}/.docker/config.json &&
      cat << EOF > ${HOME}/.docker/config.json
  {
    "auths": {},
    "detachKeys": "ctrl-\\"
  }
  EOF
#+end_src

** Emacs 29
#+begin_src sh
  sudo add-apt-repository ppa:ubuntuhandbook1/emacs &&
      sudo apt update &&
      sudo apt -y install emacs emacs-el emacs-mozc cmake libtool-bin && #=> cmake and libtool-bin for vterm
      : > ${HOME}/.bashrc.d/emacs &&
      echo "alias emacs='setxkbmap -layout jp && XMODIFIERS=@im=none emacs >> /dev/null 2>&1 &'" > ${HOME}/.bashrc.d/emacs &&
      . ${HOME}/.bashrc.d/emacs
#+end_src

** Dropbox
#+begin_src sh
  wget -q -O- https://www.dropbox.com/download?plat=lnx.x86_64 | tar xzvf - &&
      wget -O ${HOME}/bin/dropbox.py https://www.dropbox.com/download?dl=packages/dropbox.py &&
      chmod +x ${HOME}/bin/dropbox.py &&
      dropbox.py autostart y &&
      : > ${HOME}/.bashrc.d/dropbox &&
      echo "dropbox.py status | grep -q \"Dropbox isn't running\!\" && dropbox.py start > /dev/null 2>&1" > ${HOME}/.bashrc.d/dropbox &&
      . ${HOME}/.bashrc.d/dropbox
#+end_src

#+begin_src sh
  dropbox.py status #=> 同期状況確認
#+end_src

#+begin_src sh
  ln -s ${HOME}/Dropbox/org ${HOME}/org
#+end_src

** ssh
#+begin_src sh
  mkdir ${HOME}/.ssh &&
      chmod 700 ${HOME}/.ssh &&
      cp ${HOME}/Dropbox/clients/dotssh/* ${HOME}/.ssh &&
      chmod 400 ${HOME}/.ssh/*.key
#+end_src

** Input method
#+begin_src sh
  sudo apt update &&
      sudo apt -y install fcitx-mozc &&
      dbus-uuidgen | sudo tee /var/lib/dbus/machine-id > /dev/null 2>&1 &&
      im-config -n fcitx &&
      : > ${HOME}/.bash_profile.d/fcitx-mozc &&
      cat << EOF > ${HOME}/.bash_profile.d/fcitx-mozc
  export GTK_IM_MODULE=fcitx
  export QT_IM_MODULE=fcitx
  export XMODIFIERS=@im=fcitx
  export DefaultIMModule=fcitx
  if [ \$SHLVL = 1 ] ; then
      fcitx-autostart > /dev/null 2>&1
      xset -r 49  > /dev/null 2>&1
  fi

  export NO_AT_BRIDGE=1
  EOF
  . ${HOME}/.bash_profile.d/fcitx-mozc
#+end_src

#+begin_src sh
  fcitx-configtool
  #=> 「入力メソッド」の一番上を、「キーボード - 日本語」にする。
  #=> 「Ctrl + Shift + S」のホットキーを無効化する。
#+end_src

** Haskell
#+begin_src sh
  wget -q -O- https://get-ghcup.haskell.org | sh &&
      : > ${HOME}/.bash_profile.d/ghcup &&
      echo '[ -f ${HOME}/.ghcup/env ] && . ${HOME}/.ghcup/env' >> ${HOME}/.bash_profile.d/ghcup &&
      . ${HOME}/.bash_profile.d/ghcup
#+end_src

#+begin_src sh
  stack config set system-ghc --global true &&
      : > ${HOME}/.bashrc.d/stack &&
      echo 'eval "$(stack --bash-completion-script stack)"' >> ${HOME}/.bashrc.d/stack &&
      . ${HOME}/.bashrc.d/stack
#+end_src

** Node
#+begin_src sh
  wget -q -O- https://raw.githubusercontent.com/creationix/nvm/v0.39.1/install.sh | bash &&
      : > ${HOME}/.bashrc.d/node &&
      echo 'export NVM_DIR=$HOME/.nvm'                                       >> ${HOME}/.bashrc.d/node &&
      echo '[ -s "$NVM_DIR/nvm.sh" ] && . $NVM_DIR/nvm.sh'                   >> ${HOME}/.bashrc.d/node &&
      echo '[ -s "$NVM_DIR/bash_completion" ] && . $NVM_DIR/bash_completion' >> ${HOME}/.bashrc.d/node &&
      echo '[ "none" = $(nvm current) ] && nvm install node'                 >> ${HOME}/.bashrc.d/node &&
      . ${HOME}/.bashrc.d/node &&
      nvm install node --reinstall-packages-from=current &&
      nvm alias default node
#+end_src

** Elm
#+begin_src sh
  npm install -g http-server elm elm-format elm-oracle elm-test @elm-tooling/elm-language-server
#+end_src

** Intellij IDEA
#+begin_src sh
  sudo snap install intellij-idea-ultimate --classic &&
      : > ${HOME}/.bashrc.d/idea &&
      echo "alias idea='setxkbmap -layout jp && intellij-idea-ultimate >> /dev/null 2>&1 &'" > ${HOME}/.bashrc.d/idea &&
      . ${HOME}/.bashrc.d/idea
#+end_src

** virtualbox/vagrant (only configuration for WSL2)
#+begin_src sh
  wget -q -O- https://apt.releases.hashicorp.com/gpg | sudo apt-key add - &&
      sudo add-apt-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main" &&
      sudo apt update &&
      sudo apt -y install vagrant=$(vagrant.exe --version | cut -d' ' -f2 | tr -d '\r') &&
      : > ${HOME}/.bash_profile.d/vagrant &&
      echo 'export VAGRANT_WSL_ENABLE_WINDOWS_ACCESS="1"'               >> ${HOME}/.bash_profile.d/vagrant &&
      echo 'export PATH="$PATH:/mnt/c/Program Files/Oracle/VirtualBox"' >> ${HOME}/.bash_profile.d/vagrant &&
      . ${HOME}/.bash_profile.d/vagrant &&
      vagrant plugin install virtualbox_WSL2 &&
      vagrant plugin install vagrant-hosts &&
      vagrant plugin install vagrant-disksize
#+end_src

** go
#+begin_src sh
  : > ${HOME}/.bash_profile.d/go &&
      echo 'export GOPATH="$HOME/.local/go"'   >> ${HOME}/.bash_profile.d/go &&
      echo 'export PATH="$GOPATH/bin:$PATH"' >> ${HOME}/.bash_profile.d/go &&
      . ${HOME}/.bash_profile.d/go &&
      sudo rm -rf "$GOPATH" &&
      wget -q -O- https://go.dev/dl/go1.21.3.linux-amd64.tar.gz | tar -C "${GOPATH%/go}" -xzf -
#+end_src

** Python
#+begin_src sh
  : > ${HOME}/.bash_profile.d/python &&
      echo 'export PYPATH="$HOME/.local/python"' >> ${HOME}/.bash_profile.d/python &&
      echo 'export PATH="$PYPATH/bin:$PATH"'     >> ${HOME}/.bash_profile.d/python &&
      . ${HOME}/.bash_profile.d/python &&
      ( PYVERSION=3.12.0 &&
            wget -q -O- https://www.python.org/ftp/python/${PYVERSION}/Python-${PYVERSION}.tar.xz | tar -C /tmp -xJf - &&
            cd /tmp/Python-${PYVERSION} &&
            ./configure --prefix=$PYPATH &&
            make && make install )
#+end_src

** コマンドラインツール類
*** oj (competitive programming)
#+begin_src sh
  python3 -m pip install --user online-judge-tools
#+end_src
*** yq
#+begin_src sh
  wget -q -O ${HOME}/.local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 &&
      chmod +x ${HOME}/.local/bin/yq
#+end_src

*** gh
see https://github.com/cli/cli/blob/trunk/docs/install_linux.md

*** ghq
#+begin_src sh
  go install github.com/x-motemen/ghq@latest
#+end_src

*** git-delta
#+begin_src sh
  wget -q -O /tmp/git-delta.deb https://github.com/dandavison/delta/releases/download/0.13.0/git-delta_0.13.0_amd64.deb &&
      sudo dpkg -i /tmp/git-delta.deb
#+end_src

*** AWSCLIv2
#+begin_src sh
  wget -q -O /tmp/awscliv2.zip https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip &&
      unzip -u -d /tmp /tmp/awscliv2.zip &&
      sudo /tmp/aws/install --update &&
      bash ${HOME}/Dropbox/creds/aws_cred_setup.bash
#+end_src

*** SDKMAN
#+begin_src sh
  wget -q -O- https://get.sdkman.io | bash &&
      : > ${HOME}/.bashrc.d/sdkman &&
      echo 'export SDKMAN_DIR="${HOME}/.sdkman"'                                                 >> ${HOME}/.bashrc.d/sdkman &&
      echo '[[ -s "${SDKMAN_DIR}/bin/sdkman-init.sh" ]] && . "${SDKMAN_DIR}/bin/sdkman-init.sh"' >> ${HOME}/.bashrc.d/sdkman &&
      . ${HOME}/.bashrc.d/sdkman
#+end_src

*** Terraform
see https://developer.hashicorp.com/terraform/install
